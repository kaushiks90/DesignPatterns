using System;
using System.Collections.Generic;
using System.IO;

namespace DesignPatterns {

    public class Journal {
        private readonly List<string> entries = new List<string> ();

        private static int count = 0;

        public int AddEntry (string text) {
            entries.Add ($"{++count}: {text}");
            return count; // memento pattern!
        }

        public void RemoveEntry (int index) {
            entries.RemoveAt (index);
        }

        public override string ToString () {
            return string.Join (Environment.NewLine, entries);
        }

        // breaks single responsibility principle
        public void Save (string filename, bool overwrite = false) {
            File.WriteAllText (filename, ToString ());
        }

        public void Load (string filename) {

        }

        public void Load (Uri uri) {

        }

        public void SaveToFile (Journal journal, string filename, bool overwrite = false) {
            if (overwrite || !File.Exists (filename))
                File.WriteAllText (filename, journal.ToString ());
        }
    }

        class Program {
            static void Main (string[] args) {
                var j = new Journal ();
                j.AddEntry ("I cried today.");
                j.AddEntry ("I ate a bug.");
                System.Console.WriteLine (j);

                var filename = @"c:\temp\journal.txt";
                j.SaveToFile (j, filename);
                Console.ReadLine ();
            }
        }
    

}