using System;
using System.Threading;

namespace ConsoleApp
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            Sbi sbi = new Sbi();
            BankClient b = new BankClient(sbi, "SNA");

            Console.WriteLine(b.AccountCreated());
            Console.WriteLine(b.DepositeCreated());


            Console.ReadKey();
        }

    }
   public interface ICreateAccount
    {
        string CreateNewAccount();
    }
   public interface ICreateFixedDeposit
    {
        string CreateDeposit();
    }

    class RetirementAccount : ICreateAccount
    {
        public string CreateNewAccount()
        {
            return "Creates New Retirement Account";
        }
    }

    class StudentAccount : ICreateAccount
    {
        public string CreateNewAccount()
        {
            return "Created New student Account";
        }
    }
    class FixedDeposit : ICreateFixedDeposit
    {
        public string CreateDeposit()
        {
           return "Created Fixed";
        }
    }

    class RecurringDeposit : ICreateFixedDeposit
    {
        public string CreateDeposit()
        {
            return "Created Recurring Deposit";
        }
    }


    public interface IBankCreator
    {
        ICreateAccount CreateAccount(string type);
        ICreateFixedDeposit CreateDeposit(string type);

    }

    public class Sbi : IBankCreator
    {
        public ICreateAccount CreateAccount(string type)
        {
            switch (type)
            {
                case "SNA":
                    return new StudentAccount();
                case "SRNA":
                    return new RetirementAccount();
                default:
                    throw new NotImplementedException();
            }
        }

        public ICreateFixedDeposit CreateDeposit(string type)
        {
            switch (type)
            {
                case "SNA":
                    return new FixedDeposit();
                case "SRNA":
                    return new RecurringDeposit();
                    default:
                    throw new NotImplementedException();
            }
        }
    }

    public class Kotak : IBankCreator
    {
        public ICreateAccount CreateAccount(string type)
        {
            switch (type)
            {
                case "KNA":
                    return new StudentAccount();
                case "KRNA":
                    return new RetirementAccount();
                default:
                    throw new NotImplementedException();
            }
        }

        public ICreateFixedDeposit CreateDeposit(string type)
        {
            switch (type)
            {
                case "KNA":
                    return new FixedDeposit();
                case "KRNA":
                    return new RecurringDeposit();
                default:
                    throw new NotImplementedException();
            }
        }
    }

    public class BankClient
    {
        ICreateAccount ICreateAccount;
        ICreateFixedDeposit ICreateFixedDeposit;
        public BankClient(IBankCreator IBankCreator,string type)
        {
            ICreateAccount = IBankCreator.CreateAccount(type);
            ICreateFixedDeposit = IBankCreator.CreateDeposit(type);
        }

        public string AccountCreated()
        {
            return ICreateAccount.CreateNewAccount();
        }
        public string DepositeCreated()
        {
            return ICreateFixedDeposit.CreateDeposit();
     
        }
    }




}


